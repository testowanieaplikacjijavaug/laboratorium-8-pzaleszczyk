/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.easymock.EasyMock;
import org.easymock.internal.MocksControl.MockType;
import org.junit.jupiter.api.Test;

public class VerifyMockoTest {
    
    @Test
	public void exampleOne() {
		Mocko obj = EasyMock.createMock(Mocko.class);
        EasyMock.expect(obj.getSquare()).andReturn(15);
        EasyMock.expect(obj.getCube()).andReturn(20);
        EasyMock.replay(obj);
        
        //Oczekiwane metody to getSquare i getCube.
        //Uruchamiamy tylko getCube
        assertEquals(20, obj.getCube());
        //Nie uzywamy verify - testy przechodza
	}
    
    @Test
   	public void exampleOneWVerify() {
   		Mocko obj = EasyMock.createMock(Mocko.class);
           EasyMock.expect(obj.getSquare()).andReturn(15);
           EasyMock.expect(obj.getCube()).andReturn(20);
           EasyMock.replay(obj);
           
           //Oczekiwane metody to getSquare i getCube.
           //Uruchamiamy tylko getCube
           assertEquals(20, obj.getCube());
           //Uzywamy verify - testy nie przechodza bo musza byc wykonane wszystkie oczekiwane metody
           //Dostajemy assertionError
           assertThrows(AssertionError.class, () ->{
               EasyMock.verify(obj);
           });
   	}
    
    //Inne przypadki bez verify
    //Gdy expect dostanie niepoprawna metode zwraca AssertionError (strict)
    //Gdy wszystkie expect zostana poprawnie wykonane kazda kolejne metoda zwraca AssertionError 
    @Test
	public void exampleTwo() {
		Mocko obj = EasyMock.createMock(Mocko.class);
        EasyMock.expect(obj.getSquare()).andReturn(15);
        EasyMock.expect(obj.getCube()).andReturn(20);
        EasyMock.replay(obj);
        
        //Oczekiwane metody to getSquare i getCube.
        //Uruchamiamy 3 metody zamiast 2
        assertEquals(15, obj.getSquare());
        assertEquals(20, obj.getCube());
        
        assertThrows(AssertionError.class, () ->{
            assertEquals(20, obj.getCube());
        });
        //Error
	}
    
    @Test
   	public void exampleThree() {
   		Mocko obj = EasyMock.createStrictMock(Mocko.class);
           EasyMock.expect(obj.getSquare()).andReturn(15);
           EasyMock.expect(obj.getCube()).andReturn(20);
           EasyMock.replay(obj);
           
           //Zla kolejnosc dla strict 
           assertThrows(AssertionError.class, () ->{
        	   assertEquals(20, obj.getCube());
        	   assertEquals(15, obj.getSquare());
           });
           //Error
   	}

    
    
}
